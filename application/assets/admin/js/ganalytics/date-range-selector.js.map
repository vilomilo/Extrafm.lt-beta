{"version":3,"sources":["date-range-selector.js"],"names":[],"mappings":"AAoBA,KAAA,UAAA,MAAA,WAWA,QAAA,GAAA,GAEA,GAAA,EAAA,KAAA,GAAA,MAAA,EAEA,IAAA,GAAA,EAAA,KAAA,EACA,IAAA,EACA,MAAA,IAAA,EAAA,GACA,IAAA,SAAA,EACA,MAAA,GAAA,EACA,IAAA,aAAA,EACA,MAAA,GAAA,EAEA,MAAA,IAAA,OAAA,uBAAA,GASA,QAAA,GAAA,GACA,GAAA,GAAA,GAAA,KACA,GAAA,QAAA,EAAA,UAAA,EACA,IAAA,GAAA,OAAA,EAAA,WAAA,EACA,GAAA,GAAA,EAAA,OAAA,IAAA,EAAA,CACA,IAAA,GAAA,OAAA,EAAA,UAEA,OADA,GAAA,GAAA,EAAA,OAAA,IAAA,EAAA,EACA,EAAA,cAAA,IAAA,EAAA,IAAA,EArCA,GAAA,GAAA,eACA,EAAA,qBAuCA,MAAA,UAAA,gBAAA,qBAMA,QAAA,WACA,GAAA,GAAA,KAAA,KACA,GAAA,cAAA,EAAA,eAAA,WACA,EAAA,YAAA,EAAA,aAAA,YAGA,KAAA,UAAA,gBAAA,GAAA,UACA,SAAA,eAAA,EAAA,WAAA,EAAA,UAGA,EAAA,WAAA,KAAA,SAAA,EAAA,UAEA,KAAA,UAAA,UAAA,KAAA,QACA,IAAA,GAAA,KAAA,UAAA,iBAAA,QAWA,OATA,MAAA,eAAA,EAAA,GACA,KAAA,eAAA,MAAA,EAAA,EAAA,eACA,KAAA,aAAA,EAAA,GACA,KAAA,aAAA,MAAA,EAAA,EAAA,aAEA,KAAA,YACA,KAAA,YAEA,KAAA,UAAA,SAAA,KAAA,SAAA,KAAA,MACA,MAOA,SAAA,WACA,KAAA,YACA,KAAA,YACA,KAAA,KAAA,UACA,aAAA,KAAA,cACA,WAAA,KAAA,eAOA,UAAA,WACA,KAAA,cAAA,KAAA,eAAA,MACA,KAAA,YAAA,KAAA,aAAA,OAMA,UAAA,WACA,KAAA,eAAA,IAAA,KAAA,aAAA,MACA,KAAA,aAAA,IAAA,KAAA,eAAA,OASA,SACA","file":"date-range-selector.js","sourcesContent":["// Copyright 2014 Google Inc. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n\n/* global gapi */\n\n/**\n * A DateRangeSelector component for the Embed API.\n */\ngapi.analytics.ready(function() {\n\n  var nDaysAgo = /(\\d+)daysAgo/;\n  var dateFormat = /\\d{4}\\-\\d{2}\\-\\d{2}/;\n\n  /**\n   * Convert a date acceptable to the Core Reporting API (e.g. `today`,\n   * `yesterday` or `NdaysAgo`) into the format YYYY-MM-DD. Dates\n   * already in that format are simply returned.\n   * @return {string} The formatted date.\n   */\n  function convertDate(str) {\n    // If str is in the proper format, do nothing.\n    if (dateFormat.test(str)) return str;\n\n    var match = nDaysAgo.exec(str);\n    if (match) {\n      return daysAgo(+match[1]);\n    } else if (str == 'today') {\n      return daysAgo(0);\n    } else if (str == 'yesterday') {\n      return daysAgo(1);\n    } else {\n      throw new Error('Cannot convert date ' + str);\n    }\n  }\n\n  /**\n   * Accept a number and return a date formatted as YYYY-MM-DD that\n   * represents that many days ago.\n   * @return {string} The formatted date.\n   */\n  function daysAgo(numDays) {\n    var date = new Date();\n    date.setDate(date.getDate() - numDays);\n    var month = String(date.getMonth() + 1);\n    month = month.length == 1 ? '0' + month: month;\n    var day = String(date.getDate());\n    day = day.length == 1 ? '0' + day: day;\n    return date.getFullYear() + '-' + month + '-' + day;\n  }\n\n  gapi.analytics.createComponent('DateRangeSelector', {\n\n    /**\n     * Initialize the DateRangeSelector instance and render it to the page.\n     * @return {DateRangeSelector} The instance.\n     */\n    execute: function() {\n      var options = this.get();\n      options['start-date'] = options['start-date'] || '7daysAgo';\n      options['end-date'] = options['end-date'] || 'yesterday';\n\n      // Allow container to be a string ID or an HTMLElement.\n      this.container = typeof options.container == 'string' ?\n        document.getElementById(options.container) : options.container;\n\n      // Allow the template to be overridden.\n      if (options.template) this.template = options.template;\n\n      this.container.innerHTML = this.template;\n      var dateInputs = this.container.querySelectorAll('input');\n\n      this.startDateInput = dateInputs[0];\n      this.startDateInput.value = convertDate(options['start-date']);\n      this.endDateInput = dateInputs[1];\n      this.endDateInput.value = convertDate(options['end-date']);\n\n      this.setValues();\n      this.setMinMax();\n\n      this.container.onchange = this.onChange.bind(this);\n      return this;\n    },\n\n    /**\n     * Emit a change event based on the currently selected dates.\n     * Pass an object containing the start date and end date.\n     */\n    onChange: function() {\n      this.setValues();\n      this.setMinMax();\n      this.emit('change', {\n        'start-date': this['start-date'],\n        'end-date': this['end-date']\n      });\n    },\n\n    /**\n     * Updates the instance properties based on the input values.\n     */\n    setValues: function() {\n      this['start-date'] = this.startDateInput.value;\n      this['end-date'] = this.endDateInput.value;\n    },\n\n    /**\n     * Updates the input min and max attributes so there's no overlap.\n     */\n    setMinMax: function() {\n      this.startDateInput.max = this.endDateInput.value;\n      this.endDateInput.min = this.startDateInput.value;\n    },\n\n    /**\n     * The html structure used to build the component. Developers can\n     * override this by passing it to the component constructor.\n     * The only requirement is that the structure contain two inputs, the\n     * first will be the start date and the second will be the end date.\n     */\n    template:\n      '<div class=\"DateRangeSelector\">' +\n      '  <div class=\"DateRangeSelector-item\">' +\n      '    <label>Start Date</label> ' +\n      '    <input type=\"date\">' +\n      '  </div>' +\n      '  <div class=\"DateRangeSelector-item\">' +\n      '    <label>End Date</label> ' +\n      '    <input type=\"date\">' +\n      '  </div>' +\n      '</div>'\n  });\n\n});\n\n"],"sourceRoot":"/source/"}